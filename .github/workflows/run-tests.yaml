name: run-tests
on:
  push:
  pull_request:
    branches: [ "master" ]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container: 
      image: silkeh/clang:19
      options: --user root
    steps:
      - name: Install deps
        run: apt update && apt install -y git ninja-build valgrind libboost-context-dev libgflags-dev
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Debug
          cmake --build build --target lin_check_test
      - name: Run lin check test
        run: ./build/test/runtime/lin_check_test
  verifying-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container: 
      image: silkeh/clang:19
      options: --user root
    steps:
      - name: Install deps
        run: |
          apt update && apt install -y git ninja-build valgrind libgoogle-glog-dev libsnappy-dev protobuf-compiler libboost-context-dev pkg-config libcapstone-dev && \
          git clone https://github.com/Kirillog/syscall_intercept.git &&  \
          cmake syscall_intercept -G Ninja -B syscall_intercept/build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang && \
          cmake --build syscall_intercept/build --target install
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target verifying/targets/nonlinear_queue verifying/blocking/nonlinear_mutex verifying/blocking/simple_mutex
      - name: Run nonlinear_queue with pct strategy
        run: |
          ./build/verifying/targets/nonlinear_queue --strategy pct --tasks 10 --rounds 240 || error_code=$?
          if [ "${error_code}" -ne 1 ]; then 
            exit 1
          fi
      - name: Run nonlinear_queue with random strategy
        run: |
          ./build/verifying/targets/nonlinear_queue --tasks 4 --rounds 100000 --strategy random --switches 1 || error_code=$?
          if [ "${error_code}" -ne 1 ]; then 
            exit 1
          fi
      - name: Run nonlinear_mutex with random strategy
        run: |
          LD_PRELOAD=build/syscall_intercept/libpreload.so ./build/verifying/blocking/nonlinear_mutex --threads 4 --strategy random || error_code=$?
          if [ "${error_code}" -ne 1 ]; then 
            exit 1
          fi
      - name: Run nonlinear_mutex with pct strategy
        run: |
          LD_PRELOAD=build/syscall_intercept/libpreload.so ./build/verifying/blocking/nonlinear_mutex --strategy pct --tasks 10 --rounds 1000 || error_code=$?
          if [ "${error_code}" -ne 1 ]; then 
            exit 1
          fi
  verifying-folly-test:
    runs-on: ubuntu-latest
    env:
      LTEST_BUILD_PATH: "/__w/LTest/LTest/build"
    defaults:
      run:
        shell: bash
    container: 
      image: silkeh/clang:19
      options: --user root
    steps:
      - name: Install deps
        run: |
          apt update && apt install -y git ninja-build valgrind libgoogle-glog-dev libsnappy-dev \
                    protobuf-compiler libboost-context-dev pkg-config libcapstone-dev \
                    libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev \
                    libdouble-conversion-dev libfast-float-dev libevent-dev libssl-dev libfmt-dev \
                    libgoogle-glog-dev zlib1g-dev && \
          git clone --depth=1 https://github.com/Kirillog/syscall_intercept.git &&  \
          cmake syscall_intercept -G Ninja -B syscall_intercept/build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang && \
          cmake --build syscall_intercept/build --target install
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build folly ltest dependencies
        run: |
          cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target plugin_pass runtime
      - name: Install folly
        run: |
          git clone --depth=1 https://github.com/Kirillog/folly.git && \
          cmake folly -G Ninja -B folly/build_dir -DCMAKE_BUILD_TYPE=Release && \
          cmake --build folly/build_dir --target install
      - name: Build tests
        run: |
          cmake --build build --target verifying/blocking/folly_rwspinlock verifying/blocking/folly_sharedmutex
      - name: Run folly rwspinlock with random strategy
        run: |
          LD_PRELOAD=build/syscall_intercept/libpreload.so ./build/verifying/blocking/folly_rwspinlock --strategy random || error_code=$?
          if [ "${error_code}" -ne 0 ]; then
            exit 1
          fi
      - name: Run folly shared_mutex with random strategy
        run: |
          LD_PRELOAD=build/syscall_intercept/libpreload.so ./build/verifying/blocking/folly_sharedmutex --strategy random || error_code=$?
          if [ "${error_code}" -ne 0 ]; then
            exit 1
          fi
      
