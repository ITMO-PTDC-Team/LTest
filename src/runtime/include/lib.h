#pragma once
#include <coroutine>
#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <vector>

#include "stable_vector.h"

extern "C" {
// Let's begin from C-style API to make LLVM calls easier.

// This structure must be equal to the clone in LLVM pass.
struct CoroPromise {
  using Handle = std::coroutine_handle<CoroPromise>;

  int has_ret_val{};
  int ret_val{};
  Handle child_hdl{};
};

struct CoroPromise;
using Handle = std::coroutine_handle<CoroPromise>;

// Clones the existing task. Cloners are created with macro.
typedef Handle (*TaskCloner)(void* this_ptr, void* args_ptr);

// Task describes a coroutine to run.
struct Task {
  // Task meta info.
  // Does not change in the task runtime.
  // Stored only for tasks, which where generated by launcher.
  struct Meta {
    // Name of the task.
    std::string name;
    // Pointer to the arguments, points to the std::tuple.
    std::shared_ptr<void> args;
    // Args as strings.
    std::vector<std::string> str_args;
  };

  // Constructs a non root task from handler.
  Task(Handle hdl);
  // Constructs a root task from handler, cloner.
  Task(Handle hdl, TaskCloner cloner);

  Task(const Task&) = delete;
  Task(Task&&);
  Task& operator=(Task&&);

  // Resumes task until next suspension point.
  // If task calls another coroutine during execution
  // then has_child() returns true after this call.
  //
  // Panics if has_ret_val() == true.
  void Resume();

  // Returns true if the task called another coroutine task.
  // Scheduler must check result of this function after each resume.
  bool HasChild();

  // Returns child of the task.
  //
  // Panics if has_child() == false.
  Task GetChild();

  // Must be called by scheduler after current
  // child task is terminated.
  void ClearChild();

  // Returns true if the task is terminated.
  bool IsReturned();

  // Get return value of the task.
  //
  // Panics if has_ret_val() == false.
  int GetRetVal();

  // Returns the task name.
  const std::string& GetName() const;

  // Returns the task args.
  void* GetArgs() const;

  // Returns the args as strings.
  const std::vector<std::string>& GetStrArgs() const;

  // Sets the meta information.
  void SetMeta(std::shared_ptr<Meta> meta);

  // Starts this task from the beginning.
  // Returns a task with new handle.
  Task StartFromTheBeginning(void* state);

  ~Task();

 private:
  std::shared_ptr<Meta> meta{};
  TaskCloner cloner;
  Handle hdl;
};

// Creates a task. Builders are created with macro.
typedef Task (*TaskBuilder)(void* this_ptr);

// Runtime token.
// Target method could use token generator and StackfulTask will account this.
struct Token {
  bool parked{};
  void Reset();
};

// StackfulTask is a Task wrapper which contains the stack inside, so resume
// method resumes the last subtask.
struct StackfulTask {
  explicit StackfulTask(TaskBuilder builder, void* this_state);
  explicit StackfulTask(Task);

  StackfulTask(const StackfulTask&) = delete;
  StackfulTask(StackfulTask&&);

  // Returns the root task name.
  const std::string& GetName() const;

  // Returns the root task args.
  void* GetArgs() const;

  // Return the root task args as strings.
  const std::vector<std::string>& GetStrArgs() const;

  // Sets token for this task.
  void SetToken(std::shared_ptr<Token> token);

  // Returns true is the task was parked.
  bool IsParked();

  // Start the task from the beginning.
  void StartFromTheBeginning(void*);

  // Resume method resumes the last subtask.
  virtual void Resume();

  // Haven't the first task finished yet?
  virtual bool IsReturned();

  void Terminate();

  // Returns the value that was returned from the first task, have to be called
  // only when IsReturned is true
  // TODO: after a while int will be replaced with the trait
  [[nodiscard]] virtual int GetRetVal() const;

  virtual ~StackfulTask();

  // TODO: snapshot method might be useful.
 protected:
  // Need this constructor for tests
  StackfulTask();

 private:
  std::shared_ptr<Token> token{};
  // Keeps all spawned tasks.
  StableVector<Task> spawned_tasks{};
  // Current stack.
  std::vector<std::reference_wrapper<Task>> stack{};
  int last_returned_value{};
};

StackfulTask* GetCurrentTask();

void SetCurrentTask(StackfulTask*);
}

struct Response {
  Response(const StackfulTask& task, int result, int thread_id);

  [[nodiscard]] const StackfulTask& GetTask() const;

  int result;
  int thread_id;

 private:
  std::reference_wrapper<const StackfulTask> task;
};

struct Invoke {
  explicit Invoke(const StackfulTask& task, int thread_id);

  [[nodiscard]] const StackfulTask& GetTask() const;

  int thread_id;

 private:
  std::reference_wrapper<const StackfulTask> task;
};
